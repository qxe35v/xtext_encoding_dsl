/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.ide.contentassist.antlr.internal.InternalEncodingLangParser;
import org.xtext.example.services.EncodingLangGrammarAccess;

public class EncodingLangParser extends AbstractContentAssistParser {

	@Inject
	private EncodingLangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEncodingLangParser createParser() {
		InternalEncodingLangParser result = new InternalEncodingLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMappingAccess().getAlternatives(), "rule__Mapping__Alternatives");
					put(grammarAccess.getSourceMappingAccess().getGroup(), "rule__SourceMapping__Group__0");
					put(grammarAccess.getExactMappingAccess().getGroup(), "rule__ExactMapping__Group__0");
					put(grammarAccess.getTransliterationMappingAccess().getGroup(), "rule__TransliterationMapping__Group__0");
					put(grammarAccess.getAliasAccess().getGroup(), "rule__Alias__Group__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getSourceMappingAccess().getNameAssignment_1(), "rule__SourceMapping__NameAssignment_1");
					put(grammarAccess.getSourceMappingAccess().getAliasesAssignment_3(), "rule__SourceMapping__AliasesAssignment_3");
					put(grammarAccess.getSourceMappingAccess().getMappingsAssignment_4(), "rule__SourceMapping__MappingsAssignment_4");
					put(grammarAccess.getExactMappingAccess().getFromAssignment_0(), "rule__ExactMapping__FromAssignment_0");
					put(grammarAccess.getExactMappingAccess().getToAssignment_2(), "rule__ExactMapping__ToAssignment_2");
					put(grammarAccess.getTransliterationMappingAccess().getFromAssignment_0(), "rule__TransliterationMapping__FromAssignment_0");
					put(grammarAccess.getTransliterationMappingAccess().getToAssignment_2(), "rule__TransliterationMapping__ToAssignment_2");
					put(grammarAccess.getAliasAccess().getNameAssignment_1(), "rule__Alias__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EncodingLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EncodingLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
