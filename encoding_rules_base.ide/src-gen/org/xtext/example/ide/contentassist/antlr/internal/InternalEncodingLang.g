/*
 * generated by Xtext 2.12.0
 */
grammar InternalEncodingLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.EncodingLangGrammarAccess;

}
@parser::members {
	private EncodingLangGrammarAccess grammarAccess;

	public void setGrammarAccess(EncodingLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getElementsAssignment()); }
		(rule__Model__ElementsAssignment)*
		{ after(grammarAccess.getModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceMapping
entryRuleSourceMapping
:
{ before(grammarAccess.getSourceMappingRule()); }
	 ruleSourceMapping
{ after(grammarAccess.getSourceMappingRule()); } 
	 EOF 
;

// Rule SourceMapping
ruleSourceMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceMappingAccess().getGroup()); }
		(rule__SourceMapping__Group__0)
		{ after(grammarAccess.getSourceMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConversion
entryRuleConversion
:
{ before(grammarAccess.getConversionRule()); }
	 ruleConversion
{ after(grammarAccess.getConversionRule()); } 
	 EOF 
;

// Rule Conversion
ruleConversion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConversionAccess().getGroup()); }
		(rule__Conversion__Group__0)
		{ after(grammarAccess.getConversionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapping
entryRuleMapping
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMappingAccess().getAlternatives()); }
		(rule__Mapping__Alternatives)
		{ after(grammarAccess.getMappingAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExactMapping
entryRuleExactMapping
:
{ before(grammarAccess.getExactMappingRule()); }
	 ruleExactMapping
{ after(grammarAccess.getExactMappingRule()); } 
	 EOF 
;

// Rule ExactMapping
ruleExactMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExactMappingAccess().getGroup()); }
		(rule__ExactMapping__Group__0)
		{ after(grammarAccess.getExactMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransliterationMapping
entryRuleTransliterationMapping
:
{ before(grammarAccess.getTransliterationMappingRule()); }
	 ruleTransliterationMapping
{ after(grammarAccess.getTransliterationMappingRule()); } 
	 EOF 
;

// Rule TransliterationMapping
ruleTransliterationMapping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransliterationMappingAccess().getGroup()); }
		(rule__TransliterationMapping__Group__0)
		{ after(grammarAccess.getTransliterationMappingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAlias
entryRuleAlias
:
{ before(grammarAccess.getAliasRule()); }
	 ruleAlias
{ after(grammarAccess.getAliasRule()); } 
	 EOF 
;

// Rule Alias
ruleAlias 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAliasAccess().getGroup()); }
		(rule__Alias__Group__0)
		{ after(grammarAccess.getAliasAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMappingAccess().getExactMappingParserRuleCall_0()); }
		ruleExactMapping
		{ after(grammarAccess.getMappingAccess().getExactMappingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMappingAccess().getTransliterationMappingParserRuleCall_1()); }
		ruleTransliterationMapping
		{ after(grammarAccess.getMappingAccess().getTransliterationMappingParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__0__Impl
	rule__SourceMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getSourceKeyword_0()); }
	'source'
	{ after(grammarAccess.getSourceMappingAccess().getSourceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__1__Impl
	rule__SourceMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getNameAssignment_1()); }
	(rule__SourceMapping__NameAssignment_1)
	{ after(grammarAccess.getSourceMappingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__2__Impl
	rule__SourceMapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getSourceMappingAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__3__Impl
	rule__SourceMapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getAliasesAssignment_3()); }
	(rule__SourceMapping__AliasesAssignment_3)*
	{ after(grammarAccess.getSourceMappingAccess().getAliasesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__4__Impl
	rule__SourceMapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getConversionsAssignment_4()); }
	(rule__SourceMapping__ConversionsAssignment_4)*
	{ after(grammarAccess.getSourceMappingAccess().getConversionsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceMapping__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceMappingAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSourceMappingAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conversion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__0__Impl
	rule__Conversion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getTargetKeyword_0()); }
	'target'
	{ after(grammarAccess.getConversionAccess().getTargetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__1__Impl
	rule__Conversion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getNameAssignment_1()); }
	(rule__Conversion__NameAssignment_1)
	{ after(grammarAccess.getConversionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__2__Impl
	rule__Conversion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getConversionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__3__Impl
	rule__Conversion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getMappingsAssignment_3()); }
	(rule__Conversion__MappingsAssignment_3)*
	{ after(grammarAccess.getConversionAccess().getMappingsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conversion__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConversionAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getConversionAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExactMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExactMapping__Group__0__Impl
	rule__ExactMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExactMappingAccess().getFromAssignment_0()); }
	(rule__ExactMapping__FromAssignment_0)
	{ after(grammarAccess.getExactMappingAccess().getFromAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExactMapping__Group__1__Impl
	rule__ExactMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExactMappingAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getExactMappingAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExactMapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExactMappingAccess().getToAssignment_2()); }
	(rule__ExactMapping__ToAssignment_2)
	{ after(grammarAccess.getExactMappingAccess().getToAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TransliterationMapping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransliterationMapping__Group__0__Impl
	rule__TransliterationMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransliterationMappingAccess().getFromAssignment_0()); }
	(rule__TransliterationMapping__FromAssignment_0)
	{ after(grammarAccess.getTransliterationMappingAccess().getFromAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransliterationMapping__Group__1__Impl
	rule__TransliterationMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransliterationMappingAccess().getTildeKeyword_1()); }
	'~'
	{ after(grammarAccess.getTransliterationMappingAccess().getTildeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TransliterationMapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransliterationMappingAccess().getToAssignment_2()); }
	(rule__TransliterationMapping__ToAssignment_2)
	{ after(grammarAccess.getTransliterationMappingAccess().getToAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Alias__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alias__Group__0__Impl
	rule__Alias__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alias__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliasAccess().getAliasKeyword_0()); }
	'alias'
	{ after(grammarAccess.getAliasAccess().getAliasKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alias__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Alias__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alias__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliasAccess().getNameAssignment_1()); }
	(rule__Alias__NameAssignment_1)
	{ after(grammarAccess.getAliasAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsSourceMappingParserRuleCall_0()); }
		ruleSourceMapping
		{ after(grammarAccess.getModelAccess().getElementsSourceMappingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceMappingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSourceMappingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__AliasesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceMappingAccess().getAliasesAliasParserRuleCall_3_0()); }
		ruleAlias
		{ after(grammarAccess.getSourceMappingAccess().getAliasesAliasParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceMapping__ConversionsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceMappingAccess().getConversionsConversionParserRuleCall_4_0()); }
		ruleConversion
		{ after(grammarAccess.getSourceMappingAccess().getConversionsConversionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConversionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConversionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conversion__MappingsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConversionAccess().getMappingsMappingParserRuleCall_3_0()); }
		ruleMapping
		{ after(grammarAccess.getConversionAccess().getMappingsMappingParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__FromAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExactMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0()); }
		RULE_INPUTCHAR
		{ after(grammarAccess.getExactMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExactMapping__ToAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExactMappingAccess().getToINPUTCHARTerminalRuleCall_2_0()); }
		RULE_INPUTCHAR
		{ after(grammarAccess.getExactMappingAccess().getToINPUTCHARTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__FromAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransliterationMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0()); }
		RULE_INPUTCHAR
		{ after(grammarAccess.getTransliterationMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TransliterationMapping__ToAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransliterationMappingAccess().getToINPUTCHARTerminalRuleCall_2_0()); }
		RULE_INPUTCHAR
		{ after(grammarAccess.getTransliterationMappingAccess().getToINPUTCHARTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Alias__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INPUTCHAR : '0' ('x'|'X') (('0'..'9'|'a'..'f'|'A'..'F') ('0'..'9'|'a'..'f'|'A'..'F'))+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
