/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.formatting2

//import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.encodingLang.Alias
import org.xtext.example.encodingLang.Mapping
import org.xtext.example.encodingLang.Model
import org.xtext.example.encodingLang.SourceMapping
//import org.xtext.example.services.EncodingLangGrammarAccess

class EncodingLangFormatter extends AbstractFormatter2 {

	//@Inject extension EncodingLangGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (SourceMapping sourceMapping : model.getElements()) {
			sourceMapping.format;
		}
	}

	def dispatch void format(SourceMapping s, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		s.regionFor.keyword("source").prepend[newLine].append[oneSpace]
		var open = s.regionFor.keyword("{")
		open.prepend[oneSpace].append[newLine]
		var close = s.regionFor.keyword("}")
		close.append[newLine]
		interior(open, close)[indent]
		for (Alias alias : s.getAliases()) {
			alias.append[newLine]
			alias.regionFor.keyword("alias").prepend[indent].append[oneSpace]
		}
		for (Mapping mapping : s.getMappings()) {
			mapping.append[newLine]
			mapping.regionFor.keyword("=").surround[oneSpace]
			mapping.regionFor.keyword("~").surround[oneSpace]
		}
	}
}
