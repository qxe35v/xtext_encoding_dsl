/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.encodingLang.SourceMapping
import org.xtext.example.encodingLang.Conversion
import org.xtext.example.generator.HexToDec
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EncodingLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		fsa.generateFile(resource.toString()+".txt", resource.generate )
	}
	
	def generate(Resource r) '''
	//Generated by HIM
	#include <assert.h>
	#include <hashtable.h>
	
	hashtable* aliases_hashbtable(){
		hashtable* aliases = hashtable_init(256, sizeof(char**), sizeof(char**));
			«FOR s: r.allContents.toIterable.filter(SourceMapping)»
			const char* encoding_«s.name» = "«s.name»"; 
			hashtable_put(aliases,&encoding_«s.name»,&encoding_«s.name»);
				«FOR a: s.aliases»
				const char* alias_«a.name»_for_«s.name» = "«a.name»";
				hashtable_put(aliases,&encoding_«s.name»,&alias_«a.name»_for_«s.name»);
				«ENDFOR»
			«ENDFOR»
	
		return aliases;
		}
	
	hashtable* unit_lenghts(){
		hashtable* unit_lengths = hashtable_init(128, sizeof(char**), sizeof(uint8_t*));
			«FOR s: r.allContents.toIterable.filter(SourceMapping)»
			«IF !s.conversions.isEmpty && !s.conversions.get(0).mappings.isEmpty»
			const char* encoding_«s.name» = "«s.name»";
			uint8_t length_«s.name» = «(s.conversions.get(0).mappings.get(0).from.length-2)/2»;
			hashtable_put(unit_lengths,&encoding_«s.name»,&length_«s.name»);
				«FOR c:s.conversions»
				const char* encoding_«s.name»_to_«c.name» = "«c.name»";
				uint8_t length_«s.name»_to_«c.name» = «(c.mappings.get(0).to.length-2)/2»;
				hashtable_put(unit_lengths, &encodding_«s.name»_to_«c.name», &length_«s.name»_to_«c.name»);
				«ENDFOR»
			«ENDIF»
			«ENDFOR»
	
		return unit_lengths;
		}
	
	hashtable* mappings(){
		hahstable* mappings = hashtable_init(128,sizeof(char**), sizeof(hashtable* );
			«FOR s:r.allContents.toIterable.filter(SourceMapping)»
			const char* encoding_«s.name» = "«s.name»";
			hashtable mappings_from_«s.name» = hahstable_init(128,sizeof(char**), sizeof(hashtable*));
			hashtable_put(mappings, &encoding_«s.name», mappings_from_«s.name»);
				«FOR c:s.conversions»
				«IF c.mappings.isEmpty == false»
				const char* encoding_«s.name»_to_«c.name» = "«c.name»";
				hashtable mappings_from_«s.name»_to_«c.name» = hashtable_init(
					«IF c.mappings.get(0).from.length == 4»
					512,
					sizeof(uint8_t*),
					«ELSE»
						«IF c.mappings.get(0).from.length == 6»
						31072,
						sizeof(uint16_t*),
						«ELSE»
							8589934592,
							sizeof(uint32_t*),
						«ENDIF»
					«ENDIF»
					«IF c.mappings.get(0).to.length == 4»
					sizeof(uint8_t*));1
					«ELSE»
						«IF c.mappings.get(0).to.length == 6»
						sizeof(uint16_t*));
						«ELSE»
							sizeof(uint32_t*));
						«ENDIF»
					«ENDIF»
				hashtable_put(mappings_from_«s.name», &encoding_«s.name»_to_«c.name», mappings_from_«s.name»_to_«c.name»);
					«var a = new State(0)»
					«FOR m:c.mappings»
					«IF m.from.length == 4»
					uint8_t from_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.from)»;
					«ELSE»
						«IF m.from.length == 6»
						uint16_t from_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.from)»;
						«ELSE»
							uint32_t from_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.from)»;
						«ENDIF»
					«ENDIF»
					«IF m.to.length == 4»
					uint8_t to_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.to)»;
					«ELSE»
						«IF m.to.length == 6»
						uint16_t to_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.to)»;
						«ELSE»
							uint32_t to_value_«a.counter»_«s.name»_to_«c.name» = «HexToDec.hex2decimal(m.to)»;
						«ENDIF»
					«ENDIF»
					hashtable_put(
						mappings_from_«s.name»_to_«c.name»,
						&from_value_«a.counter»_«s.name»_to_«c.name»,
						&to_value_«a.counter»_«s.name»_to_«c.name»);
					«a.setCounter(a.counter + 1)»
					«ENDFOR»
				«ENDIF»
				«ENDFOR»
			«ENDFOR»
	}
	
	'''
}

class State {
    @Accessors
    var int counter

    new(int counter){
        this.counter = counter
    }
}
