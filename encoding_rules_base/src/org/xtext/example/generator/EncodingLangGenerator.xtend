/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.encodingLang.SourceMapping

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EncodingLangGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		//fsa.generateFile(resource.toString()+".txt", resource.generate )
	}
	
	def generate(Resource r) '''
		//Generated by HIM
		#include <assert.h>
		#include <hashtable.h>
		
		hashtable* aliases_hashbtable(){
			hashtable* aliases = hashtable_init(256, sizeof(char**), sizeof(char**));
			«FOR s: r.allContents.toIterable.filter(SourceMapping)»
			
			const char* encoding_«s.name» = "«s.name»"; 
			hashtable_put(aliases,&encoding_«s.name»,&encoding_«s.name»);
				
				«FOR a: s.aliases»
				const char* alias_«a.name»_for_«s.name» = "«a.name»";
				hashtable_put(aliases,&encoding_«s.name»,&alias_«a.name»_for_«s.name»);
				«ENDFOR»
			«ENDFOR»
		
		return aliases;
		}
		
		hashtable* unit_lenghts(){
			hashtable* unit_lengths = hashtable_init(128, sizeof(char**), sizeof(uint8_t));
			«FOR s: r.allContents.toIterable.filter(SourceMapping)»
				uint8_t length_«s.name» = «s.conversions.get(0).mappings.get(0).from.length»;
				hashtable_put(unit_lengths,&encoding_«s.name»,&length_«s.name»);
			«ENDFOR»
		
		return unit_lengths;
		}
		
		hashtable* mappings(){
			 
		}
		
	'''
	//s.mapping->list -> get(int index)
}
