/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.encodingLang.Alias;
import org.xtext.example.encodingLang.Conversion;
import org.xtext.example.encodingLang.Mapping;
import org.xtext.example.encodingLang.SourceMapping;
import org.xtext.example.generator.HexToDec;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EncodingLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _calcFileName = this.calcFileName(resource);
    String _plus = (_calcFileName + ".txt");
    fsa.generateFile(_plus, this.generate(resource));
    String _calcFileName_1 = this.calcFileName(resource);
    String _plus_1 = (_calcFileName_1 + "_header.txt");
    fsa.generateFile(_plus_1, this.generateHeader(resource));
  }
  
  public CharSequence generateHeader(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Generated by HIM");
    _builder.newLine();
    _builder.append("#ifndef ");
    String _upperCase = this.calcFileName(r).toUpperCase();
    _builder.append(_upperCase);
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _upperCase_1 = this.calcFileName(r).toUpperCase();
    _builder.append(_upperCase_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <stdint.h>");
    _builder.newLine();
    _builder.append("#include <assert.h>");
    _builder.newLine();
    _builder.append("#include \"hashtable.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("hashtable* aliases_hashbtable();");
    _builder.newLine();
    _builder.append("hashtable* unit_lenghts();");
    _builder.newLine();
    _builder.append("hashtable* mappings();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    return _builder;
  }
  
  public String calcFileName(final Resource r) {
    String s = r.toString();
    int _length = s.length();
    int i = (_length - 1);
    while ((Character.valueOf(s.charAt(i)).equals(Character.valueOf("/".charAt(0))) == false)) {
      i--;
    }
    i++;
    int _length_1 = s.length();
    int _minus = (_length_1 - 6);
    String _substring = s.substring(i, _minus);
    return (_substring + "_gen");
  }
  
  public CharSequence generate(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Generated by HIM");
    _builder.newLine();
    _builder.newLine();
    CharSequence _generateAliases = this.generateAliases(r);
    _builder.append(_generateAliases);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _generateUnitLengths = this.generateUnitLengths(r);
    _builder.append(_generateUnitLengths);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _generateMappings = this.generateMappings(r);
    _builder.append(_generateMappings);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateAliases(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("hashtable* aliases_hashbtable(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* aliases = hashtable_init(256, sizeof(char**), sizeof(char**));");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<SourceMapping> _filter = Iterables.<SourceMapping>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), SourceMapping.class);
      for(final SourceMapping s : _filter) {
        _builder.append("\t");
        _builder.append("//aliases for ");
        String _name = s.getName();
        _builder.append(_name, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("const char* encoding_");
        String _name_1 = s.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" = \"");
        String _name_2 = s.getName();
        _builder.append(_name_2, "\t");
        _builder.append("\"; ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("hashtable_put(aliases,&encoding_");
        String _name_3 = s.getName();
        _builder.append(_name_3, "\t");
        _builder.append(",&encoding_");
        String _name_4 = s.getName();
        _builder.append(_name_4, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Alias> _aliases = s.getAliases();
          for(final Alias a : _aliases) {
            _builder.append("\t");
            _builder.append("//put to ");
            String _name_5 = s.getName();
            _builder.append(_name_5, "\t");
            _builder.append(" alias ");
            String _name_6 = a.getName();
            _builder.append(_name_6, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("const char* alias_");
            String _name_7 = a.getName();
            _builder.append(_name_7, "\t");
            _builder.append("_for_");
            String _name_8 = s.getName();
            _builder.append(_name_8, "\t");
            _builder.append(" = \"");
            String _name_9 = a.getName();
            _builder.append(_name_9, "\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("hashtable_put(aliases,&encoding_");
            String _name_10 = s.getName();
            _builder.append(_name_10, "\t");
            _builder.append(",&alias_");
            String _name_11 = a.getName();
            _builder.append(_name_11, "\t");
            _builder.append("_for_");
            String _name_12 = s.getName();
            _builder.append(_name_12, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return aliases;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateUnitLengths(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("hashtable* unit_lenghts(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* unit_lengths = hashtable_init(128, sizeof(char**), sizeof(uint8_t*));");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<SourceMapping> _filter = Iterables.<SourceMapping>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), SourceMapping.class);
      for(final SourceMapping s : _filter) {
        {
          if (((!s.getConversions().isEmpty()) && (!s.getConversions().get(0).getMappings().isEmpty()))) {
            _builder.append("\t");
            _builder.append("//unit legnths for ");
            String _name = s.getName();
            _builder.append(_name, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("const char* encoding_");
            String _name_1 = s.getName();
            _builder.append(_name_1, "\t");
            _builder.append(" = \"");
            String _name_2 = s.getName();
            _builder.append(_name_2, "\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("uint8_t length_");
            String _name_3 = s.getName();
            _builder.append(_name_3, "\t");
            _builder.append(" = ");
            int _length = s.getConversions().get(0).getMappings().get(0).getFrom().length();
            int _minus = (_length - 2);
            int _divide = (_minus / 2);
            _builder.append(_divide, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("hashtable_put(unit_lengths, &encoding_");
            String _name_4 = s.getName();
            _builder.append(_name_4, "\t");
            _builder.append(", &length_");
            String _name_5 = s.getName();
            _builder.append(_name_5, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            {
              EList<Conversion> _conversions = s.getConversions();
              for(final Conversion c : _conversions) {
                _builder.append("\t");
                _builder.append("//unit length for ");
                String _name_6 = c.getName();
                _builder.append(_name_6, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("const char* encoding_");
                String _name_7 = s.getName();
                _builder.append(_name_7, "\t");
                _builder.append("_to_");
                String _name_8 = c.getName();
                _builder.append(_name_8, "\t");
                _builder.append(" = \"");
                String _name_9 = c.getName();
                _builder.append(_name_9, "\t");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("uint8_t length_");
                String _name_10 = s.getName();
                _builder.append(_name_10, "\t");
                _builder.append("_to_");
                String _name_11 = c.getName();
                _builder.append(_name_11, "\t");
                _builder.append(" = ");
                int _length_1 = c.getMappings().get(0).getTo().length();
                int _minus_1 = (_length_1 - 2);
                int _divide_1 = (_minus_1 / 2);
                _builder.append(_divide_1, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("hashtable_put(unit_lengths, &encoding_");
                String _name_12 = s.getName();
                _builder.append(_name_12, "\t");
                _builder.append("_to_");
                String _name_13 = c.getName();
                _builder.append(_name_13, "\t");
                _builder.append(", &length_");
                String _name_14 = s.getName();
                _builder.append(_name_14, "\t");
                _builder.append("_to_");
                String _name_15 = c.getName();
                _builder.append(_name_15, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.newLine();
              }
            }
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("return unit_lengths;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMappings(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("hashtable* mappings(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// hashtable for everything");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* mappings = hashtable_init(128, sizeof(char**), sizeof(hashtable*));");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Iterable<SourceMapping> _filter = Iterables.<SourceMapping>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), SourceMapping.class);
      for(final SourceMapping s : _filter) {
        _builder.append("\t");
        _builder.append("// hashtable for ");
        String _name = s.getName();
        _builder.append(_name, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("const char* encoding_");
        String _name_1 = s.getName();
        _builder.append(_name_1, "\t");
        _builder.append(" = \"");
        String _name_2 = s.getName();
        _builder.append(_name_2, "\t");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("hashtable* mappings_from_");
        String _name_3 = s.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" = hashtable_init(128, sizeof(char**), sizeof(hashtable*));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("hashtable_put(mappings, &encoding_");
        String _name_4 = s.getName();
        _builder.append(_name_4, "\t");
        _builder.append(", mappings_from_");
        String _name_5 = s.getName();
        _builder.append(_name_5, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Conversion> _conversions = s.getConversions();
          for(final Conversion c : _conversions) {
            {
              boolean _isEmpty = c.getMappings().isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                _builder.append("\t");
                _builder.append("// hash for ");
                String _name_6 = s.getName();
                _builder.append(_name_6, "\t");
                _builder.append("->");
                String _name_7 = c.getName();
                _builder.append(_name_7, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("const char* encoding_");
                String _name_8 = s.getName();
                _builder.append(_name_8, "\t");
                _builder.append("_to_");
                String _name_9 = c.getName();
                _builder.append(_name_9, "\t");
                _builder.append(" = \"");
                String _name_10 = c.getName();
                _builder.append(_name_10, "\t");
                _builder.append("\";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("hashtable* mappings_from_");
                String _name_11 = s.getName();
                _builder.append(_name_11, "\t");
                _builder.append("_to_");
                String _name_12 = c.getName();
                _builder.append(_name_12, "\t");
                _builder.append(" = hashtable_init(");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                int _length = c.getMappings().get(0).getFrom().length();
                int _minus = (_length - 2);
                String _lengthOfHash = this.getLengthOfHash(_minus);
                _builder.append(_lengthOfHash, "\t\t");
                _builder.append(",");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("sizeof(");
                int _length_1 = c.getMappings().get(0).getFrom().length();
                int _minus_1 = (_length_1 - 2);
                String _intType = this.getIntType(_minus_1);
                _builder.append(_intType, "\t\t");
                _builder.append("*),");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("sizeof(");
                int _length_2 = c.getMappings().get(0).getTo().length();
                int _minus_2 = (_length_2 - 2);
                String _intType_1 = this.getIntType(_minus_2);
                _builder.append(_intType_1, "\t\t");
                _builder.append("*));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("hashtable_put(mappings_from_");
                String _name_13 = s.getName();
                _builder.append(_name_13, "\t");
                _builder.append(", &encoding_");
                String _name_14 = s.getName();
                _builder.append(_name_14, "\t");
                _builder.append("_to_");
                String _name_15 = c.getName();
                _builder.append(_name_15, "\t");
                _builder.append(", mappings_from_");
                String _name_16 = s.getName();
                _builder.append(_name_16, "\t");
                _builder.append("_to_");
                String _name_17 = c.getName();
                _builder.append(_name_17, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("//filling in ");
                String _name_18 = s.getName();
                _builder.append(_name_18, "\t");
                _builder.append("->");
                String _name_19 = c.getName();
                _builder.append(_name_19, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                int _length_3 = c.getMappings().get(0).getFrom().length();
                int _minus_3 = (_length_3 - 2);
                String _intType_2 = this.getIntType(_minus_3);
                _builder.append(_intType_2, "\t");
                _builder.append(" from_value_");
                String _name_20 = s.getName();
                _builder.append(_name_20, "\t");
                _builder.append("_to_");
                String _name_21 = c.getName();
                _builder.append(_name_21, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                int _length_4 = c.getMappings().get(0).getTo().length();
                int _minus_4 = (_length_4 - 2);
                String _intType_3 = this.getIntType(_minus_4);
                _builder.append(_intType_3, "\t");
                _builder.append(" to_value_");
                String _name_22 = s.getName();
                _builder.append(_name_22, "\t");
                _builder.append("_to_");
                String _name_23 = c.getName();
                _builder.append(_name_23, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.newLine();
                {
                  EList<Mapping> _mappings = c.getMappings();
                  for(final Mapping m : _mappings) {
                    _builder.append("\t");
                    _builder.append("from_value_");
                    String _name_24 = s.getName();
                    _builder.append(_name_24, "\t");
                    _builder.append("_to_");
                    String _name_25 = c.getName();
                    _builder.append(_name_25, "\t");
                    _builder.append(" = ");
                    long _hex2decimal = HexToDec.hex2decimal(m.getFrom());
                    _builder.append(_hex2decimal, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("to_value_");
                    String _name_26 = s.getName();
                    _builder.append(_name_26, "\t");
                    _builder.append("_to_");
                    String _name_27 = c.getName();
                    _builder.append(_name_27, "\t");
                    _builder.append(" = ");
                    long _hex2decimal_1 = HexToDec.hex2decimal(m.getTo());
                    _builder.append(_hex2decimal_1, "\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("hashtable_put(");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("mappings_from_");
                    String _name_28 = s.getName();
                    _builder.append(_name_28, "\t\t");
                    _builder.append("_to_");
                    String _name_29 = c.getName();
                    _builder.append(_name_29, "\t\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("&from_value_");
                    String _name_30 = s.getName();
                    _builder.append(_name_30, "\t\t");
                    _builder.append("_to_");
                    String _name_31 = c.getName();
                    _builder.append(_name_31, "\t\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("&to_value_");
                    String _name_32 = s.getName();
                    _builder.append(_name_32, "\t\t");
                    _builder.append("_to_");
                    String _name_33 = c.getName();
                    _builder.append(_name_33, "\t\t");
                    _builder.append(");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.newLine();
                  }
                }
                _builder.append("\t");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("return mappings;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getIntType(final int a) {
    if ((a == 2)) {
      return "uint8_t";
    }
    if ((a == 4)) {
      return "uint16_t";
    }
    return "uint32_t";
  }
  
  public String getLengthOfHash(final int a) {
    if ((a == 2)) {
      return "512";
    }
    if ((a == 4)) {
      return "31072";
    }
    return "8589934592";
  }
}
