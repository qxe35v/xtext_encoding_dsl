/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.encodingLang.Alias;
import org.xtext.example.encodingLang.SourceMapping;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EncodingLangGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _string = resource.toString();
    String _plus = (_string + ".txt");
    fsa.generateFile(_plus, this.generate(resource));
  }
  
  public CharSequence generate(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//Generated by HIM");
    _builder.newLine();
    _builder.append("#include <assert.h>");
    _builder.newLine();
    _builder.append("#include <hashtable.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("hashtable* aliases_hashbtable(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* aliases = hashtable_init(256, sizeof(char**), sizeof(char**));");
    _builder.newLine();
    {
      Iterable<SourceMapping> _filter = Iterables.<SourceMapping>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), SourceMapping.class);
      for(final SourceMapping s : _filter) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("const char* encoding_");
        String _name = s.getName();
        _builder.append(_name, "\t");
        _builder.append(" = \"");
        String _name_1 = s.getName();
        _builder.append(_name_1, "\t");
        _builder.append("\"; ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("hashtable_put(aliases,&encoding_");
        String _name_2 = s.getName();
        _builder.append(_name_2, "\t");
        _builder.append(",&encoding_");
        String _name_3 = s.getName();
        _builder.append(_name_3, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        {
          EList<Alias> _aliases = s.getAliases();
          for(final Alias a : _aliases) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("const char* alias_");
            String _name_4 = a.getName();
            _builder.append(_name_4, "\t\t");
            _builder.append("_for_");
            String _name_5 = s.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append(" = \"");
            String _name_6 = a.getName();
            _builder.append(_name_6, "\t\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("hashtable_put(aliases,&encoding_");
            String _name_7 = s.getName();
            _builder.append(_name_7, "\t\t");
            _builder.append(",&alias_");
            String _name_8 = a.getName();
            _builder.append(_name_8, "\t\t");
            _builder.append("_for_");
            String _name_9 = s.getName();
            _builder.append(_name_9, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("return aliases;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("hashtable* unit_lenghts(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* unit_lengths = hashtable_init(128, sizeof(char**), sizeof(uint8_t));");
    _builder.newLine();
    {
      Iterable<SourceMapping> _filter_1 = Iterables.<SourceMapping>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), SourceMapping.class);
      for(final SourceMapping s_1 : _filter_1) {
        _builder.append("\t");
        _builder.append("uint8_t length_");
        String _name_10 = s_1.getName();
        _builder.append(_name_10, "\t");
        _builder.append(" = ");
        int _length = s_1.getMappings().get(0).getFrom().length();
        _builder.append(_length, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("hashtable_put(unit_lengths,&encoding_");
        String _name_11 = s_1.getName();
        _builder.append(_name_11, "\t");
        _builder.append(",&length_");
        String _name_12 = s_1.getName();
        _builder.append(_name_12, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("return unit_lengths;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("hashtable* mappings(){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("hashtable* mappings = hashtable_init(128, ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
