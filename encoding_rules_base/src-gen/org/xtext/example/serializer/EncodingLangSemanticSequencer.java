/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.encodingLang.Alias;
import org.xtext.example.encodingLang.EncodingLangPackage;
import org.xtext.example.encodingLang.ExactMapping;
import org.xtext.example.encodingLang.Model;
import org.xtext.example.encodingLang.SourceMapping;
import org.xtext.example.encodingLang.TransliterationMapping;
import org.xtext.example.services.EncodingLangGrammarAccess;

@SuppressWarnings("all")
public class EncodingLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EncodingLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EncodingLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EncodingLangPackage.ALIAS:
				sequence_Alias(context, (Alias) semanticObject); 
				return; 
			case EncodingLangPackage.EXACT_MAPPING:
				sequence_ExactMapping(context, (ExactMapping) semanticObject); 
				return; 
			case EncodingLangPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case EncodingLangPackage.SOURCE_MAPPING:
				sequence_SourceMapping(context, (SourceMapping) semanticObject); 
				return; 
			case EncodingLangPackage.TRANSLITERATION_MAPPING:
				sequence_TransliterationMapping(context, (TransliterationMapping) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Alias returns Alias
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Alias(ISerializationContext context, Alias semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EncodingLangPackage.Literals.ALIAS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EncodingLangPackage.Literals.ALIAS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns ExactMapping
	 *     ExactMapping returns ExactMapping
	 *
	 * Constraint:
	 *     (from=INPUTCHAR to=INPUTCHAR)
	 */
	protected void sequence_ExactMapping(ISerializationContext context, ExactMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EncodingLangPackage.Literals.MAPPING__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EncodingLangPackage.Literals.MAPPING__FROM));
			if (transientValues.isValueTransient(semanticObject, EncodingLangPackage.Literals.MAPPING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EncodingLangPackage.Literals.MAPPING__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExactMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getExactMappingAccess().getToINPUTCHARTerminalRuleCall_2_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     elements+=SourceMapping+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SourceMapping returns SourceMapping
	 *
	 * Constraint:
	 *     (name=ID aliases+=Alias* mappings+=Mapping*)
	 */
	protected void sequence_SourceMapping(ISerializationContext context, SourceMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns TransliterationMapping
	 *     TransliterationMapping returns TransliterationMapping
	 *
	 * Constraint:
	 *     (from=INPUTCHAR to=INPUTCHAR)
	 */
	protected void sequence_TransliterationMapping(ISerializationContext context, TransliterationMapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EncodingLangPackage.Literals.MAPPING__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EncodingLangPackage.Literals.MAPPING__FROM));
			if (transientValues.isValueTransient(semanticObject, EncodingLangPackage.Literals.MAPPING__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EncodingLangPackage.Literals.MAPPING__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransliterationMappingAccess().getFromINPUTCHARTerminalRuleCall_0_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getTransliterationMappingAccess().getToINPUTCHARTerminalRuleCall_2_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
}
