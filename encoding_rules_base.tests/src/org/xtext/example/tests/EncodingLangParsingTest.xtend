/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.encodingLang.Model

@RunWith(XtextRunner)
@InjectWith(EncodingLangInjectorProvider)
class EncodingLangParsingTest {
	@Inject
	ParseHelper<Model> parseHelper

	@Test
	def void simpleSource() {
		val result = parseHelper.parse('''
			source test{}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void multipleAliases() {
		val result = parseHelper.parse('''
			source test{
				alias testAlias1
				alias TestAlias2
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void comment() {
		val result = parseHelper.parse('''
			source test{ //comment1
				alias testAlias1 //comment2
				/*commentline1
				  commentline2*/
				alias TestAlias2
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void multipleMapping_2Bytes_NumOnly() {
		val result = parseHelper.parse('''
			source test{
				0x1122=0x1234
				0x4567~0x8593
				0x1568=0x2114
				0x6574=0x9435
				0x5769~0x1286
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void mixed_2Bytes_NumOnly() {
		val result = parseHelper.parse('''
			source test{
				alias TestAlias1
				0x1468=0x3487
				alias TestAlias2
				0x3537~0x5367
				0x8648~0x2946
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertFalse(result.eResource.errors.isEmpty)
	}

	@Test
	def void multipleMapping_2Bytes() {
		val result = parseHelper.parse('''
			source test{
				0xabcd=0xefef
				/*0xa2b4=0xde9c
				  0xaaaa~0xffff
				  0xb78c~0xf32a*/
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void multipleMapping_MultipleBytes() {
		val result = parseHelper.parse('''
			source test{
				0xabCd=0xef
				0xa2B4=0xdE449c
				0xaaaCDa~0Xf8ff
				0xb7~0xF32a6b
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void multipleSource() {
		val result = parseHelper.parse('''
			source test{
				//need alias
				0xabcd=0xef
				0xa2b4=0xde449c}
			source test2{
				alias test2alias
				0xaaacda~0xf8ff
				0xb7~0xf32a6b
			}
		''')
		Assert.assertNotNull(result)
		Assert.assertFalse(result.eResource.errors.isEmpty)
	}
	
	@Test
	def void noSource() {
		val result = parseHelper.parse('''''')
		Assert.assertNull(result)
	}
	
	@Test
	def void justComment() {
		val result = parseHelper.parse('''
			//only comment
			
			/*
			hello
			*/
			
			//last line
		''')
		Assert.assertNull(result)
	}
}
